// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package organization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrganizationClient is the client API for Organization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationClient interface {
	CreateDepartment(ctx context.Context, in *CreateDepartmentReq, opts ...grpc.CallOption) (*CreateDepartmentResp, error)
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentReq, opts ...grpc.CallOption) (*UpdateDepartmentResp, error)
	GetOrganizationDepartment(ctx context.Context, in *GetOrganizationDepartmentReq, opts ...grpc.CallOption) (*GetOrganizationDepartmentResp, error)
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentReq, opts ...grpc.CallOption) (*DeleteDepartmentResp, error)
	GetDepartment(ctx context.Context, in *GetDepartmentReq, opts ...grpc.CallOption) (*GetDepartmentResp, error)
	CreateOrganizationUser(ctx context.Context, in *CreateOrganizationUserReq, opts ...grpc.CallOption) (*CreateOrganizationUserResp, error)
	UpdateOrganizationUser(ctx context.Context, in *UpdateOrganizationUserReq, opts ...grpc.CallOption) (*UpdateOrganizationUserResp, error)
	DeleteOrganizationUser(ctx context.Context, in *DeleteOrganizationUserReq, opts ...grpc.CallOption) (*DeleteOrganizationUserResp, error)
	CreateDepartmentMember(ctx context.Context, in *CreateDepartmentMemberReq, opts ...grpc.CallOption) (*CreateDepartmentMemberResp, error)
	GetUserInDepartment(ctx context.Context, in *GetUserInDepartmentReq, opts ...grpc.CallOption) (*GetUserInDepartmentResp, error)
	DeleteUserInDepartment(ctx context.Context, in *DeleteUserInDepartmentReq, opts ...grpc.CallOption) (*DeleteUserInDepartmentResp, error)
	UpdateUserInDepartment(ctx context.Context, in *UpdateUserInDepartmentReq, opts ...grpc.CallOption) (*UpdateUserInDepartmentResp, error)
	GetSearchUserList(ctx context.Context, in *GetSearchUserListReq, opts ...grpc.CallOption) (*GetSearchUserListResp, error)
	SetOrganization(ctx context.Context, in *SetOrganizationReq, opts ...grpc.CallOption) (*SetOrganizationResp, error)
	GetOrganization(ctx context.Context, in *GetOrganizationReq, opts ...grpc.CallOption) (*GetOrganizationResp, error)
	GetSubDepartment(ctx context.Context, in *GetSubDepartmentReq, opts ...grpc.CallOption) (*GetSubDepartmentResp, error)
	GetSearchDepartmentUser(ctx context.Context, in *GetSearchDepartmentUserReq, opts ...grpc.CallOption) (*GetSearchDepartmentUserResp, error)
	SortDepartmentList(ctx context.Context, in *SortDepartmentListReq, opts ...grpc.CallOption) (*SortDepartmentListResp, error)
	SortOrganizationUserList(ctx context.Context, in *SortOrganizationUserListReq, opts ...grpc.CallOption) (*SortOrganizationUserListResp, error)
	CreateNewOrganizationMember(ctx context.Context, in *CreateNewOrganizationMemberReq, opts ...grpc.CallOption) (*CreateNewOrganizationMemberResp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	BatchImport(ctx context.Context, in *BatchImportReq, opts ...grpc.CallOption) (*BatchImportResp, error)
	MoveUserDepartment(ctx context.Context, in *MoveUserDepartmentReq, opts ...grpc.CallOption) (*MoveUserDepartmentResp, error)
	GetUserFullList(ctx context.Context, in *GetUserFullListReq, opts ...grpc.CallOption) (*GetUserFullListResp, error)
	SearchUsersFullInfo(ctx context.Context, in *SearchUsersFullInfoReq, opts ...grpc.CallOption) (*SearchUsersFullInfoResp, error)
}

type organizationClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationClient(cc grpc.ClientConnInterface) OrganizationClient {
	return &organizationClient{cc}
}

func (c *organizationClient) CreateDepartment(ctx context.Context, in *CreateDepartmentReq, opts ...grpc.CallOption) (*CreateDepartmentResp, error) {
	out := new(CreateDepartmentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/CreateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentReq, opts ...grpc.CallOption) (*UpdateDepartmentResp, error) {
	out := new(UpdateDepartmentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/UpdateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetOrganizationDepartment(ctx context.Context, in *GetOrganizationDepartmentReq, opts ...grpc.CallOption) (*GetOrganizationDepartmentResp, error) {
	out := new(GetOrganizationDepartmentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/GetOrganizationDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentReq, opts ...grpc.CallOption) (*DeleteDepartmentResp, error) {
	out := new(DeleteDepartmentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/DeleteDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetDepartment(ctx context.Context, in *GetDepartmentReq, opts ...grpc.CallOption) (*GetDepartmentResp, error) {
	out := new(GetDepartmentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/GetDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) CreateOrganizationUser(ctx context.Context, in *CreateOrganizationUserReq, opts ...grpc.CallOption) (*CreateOrganizationUserResp, error) {
	out := new(CreateOrganizationUserResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/CreateOrganizationUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) UpdateOrganizationUser(ctx context.Context, in *UpdateOrganizationUserReq, opts ...grpc.CallOption) (*UpdateOrganizationUserResp, error) {
	out := new(UpdateOrganizationUserResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/UpdateOrganizationUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) DeleteOrganizationUser(ctx context.Context, in *DeleteOrganizationUserReq, opts ...grpc.CallOption) (*DeleteOrganizationUserResp, error) {
	out := new(DeleteOrganizationUserResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/DeleteOrganizationUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) CreateDepartmentMember(ctx context.Context, in *CreateDepartmentMemberReq, opts ...grpc.CallOption) (*CreateDepartmentMemberResp, error) {
	out := new(CreateDepartmentMemberResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/CreateDepartmentMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetUserInDepartment(ctx context.Context, in *GetUserInDepartmentReq, opts ...grpc.CallOption) (*GetUserInDepartmentResp, error) {
	out := new(GetUserInDepartmentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/GetUserInDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) DeleteUserInDepartment(ctx context.Context, in *DeleteUserInDepartmentReq, opts ...grpc.CallOption) (*DeleteUserInDepartmentResp, error) {
	out := new(DeleteUserInDepartmentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/DeleteUserInDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) UpdateUserInDepartment(ctx context.Context, in *UpdateUserInDepartmentReq, opts ...grpc.CallOption) (*UpdateUserInDepartmentResp, error) {
	out := new(UpdateUserInDepartmentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/UpdateUserInDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetSearchUserList(ctx context.Context, in *GetSearchUserListReq, opts ...grpc.CallOption) (*GetSearchUserListResp, error) {
	out := new(GetSearchUserListResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/GetSearchUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) SetOrganization(ctx context.Context, in *SetOrganizationReq, opts ...grpc.CallOption) (*SetOrganizationResp, error) {
	out := new(SetOrganizationResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/SetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetOrganization(ctx context.Context, in *GetOrganizationReq, opts ...grpc.CallOption) (*GetOrganizationResp, error) {
	out := new(GetOrganizationResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetSubDepartment(ctx context.Context, in *GetSubDepartmentReq, opts ...grpc.CallOption) (*GetSubDepartmentResp, error) {
	out := new(GetSubDepartmentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/GetSubDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetSearchDepartmentUser(ctx context.Context, in *GetSearchDepartmentUserReq, opts ...grpc.CallOption) (*GetSearchDepartmentUserResp, error) {
	out := new(GetSearchDepartmentUserResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/GetSearchDepartmentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) SortDepartmentList(ctx context.Context, in *SortDepartmentListReq, opts ...grpc.CallOption) (*SortDepartmentListResp, error) {
	out := new(SortDepartmentListResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/SortDepartmentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) SortOrganizationUserList(ctx context.Context, in *SortOrganizationUserListReq, opts ...grpc.CallOption) (*SortOrganizationUserListResp, error) {
	out := new(SortOrganizationUserListResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/SortOrganizationUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) CreateNewOrganizationMember(ctx context.Context, in *CreateNewOrganizationMemberReq, opts ...grpc.CallOption) (*CreateNewOrganizationMemberResp, error) {
	out := new(CreateNewOrganizationMemberResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/CreateNewOrganizationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) BatchImport(ctx context.Context, in *BatchImportReq, opts ...grpc.CallOption) (*BatchImportResp, error) {
	out := new(BatchImportResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/BatchImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) MoveUserDepartment(ctx context.Context, in *MoveUserDepartmentReq, opts ...grpc.CallOption) (*MoveUserDepartmentResp, error) {
	out := new(MoveUserDepartmentResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/MoveUserDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetUserFullList(ctx context.Context, in *GetUserFullListReq, opts ...grpc.CallOption) (*GetUserFullListResp, error) {
	out := new(GetUserFullListResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/GetUserFullList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) SearchUsersFullInfo(ctx context.Context, in *SearchUsersFullInfoReq, opts ...grpc.CallOption) (*SearchUsersFullInfoResp, error) {
	out := new(SearchUsersFullInfoResp)
	err := c.cc.Invoke(ctx, "/OpenIMChat.organization.organization/SearchUsersFullInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServer is the server API for Organization service.
// All implementations must embed UnimplementedOrganizationServer
// for forward compatibility
type OrganizationServer interface {
	CreateDepartment(context.Context, *CreateDepartmentReq) (*CreateDepartmentResp, error)
	UpdateDepartment(context.Context, *UpdateDepartmentReq) (*UpdateDepartmentResp, error)
	GetOrganizationDepartment(context.Context, *GetOrganizationDepartmentReq) (*GetOrganizationDepartmentResp, error)
	DeleteDepartment(context.Context, *DeleteDepartmentReq) (*DeleteDepartmentResp, error)
	GetDepartment(context.Context, *GetDepartmentReq) (*GetDepartmentResp, error)
	CreateOrganizationUser(context.Context, *CreateOrganizationUserReq) (*CreateOrganizationUserResp, error)
	UpdateOrganizationUser(context.Context, *UpdateOrganizationUserReq) (*UpdateOrganizationUserResp, error)
	DeleteOrganizationUser(context.Context, *DeleteOrganizationUserReq) (*DeleteOrganizationUserResp, error)
	CreateDepartmentMember(context.Context, *CreateDepartmentMemberReq) (*CreateDepartmentMemberResp, error)
	GetUserInDepartment(context.Context, *GetUserInDepartmentReq) (*GetUserInDepartmentResp, error)
	DeleteUserInDepartment(context.Context, *DeleteUserInDepartmentReq) (*DeleteUserInDepartmentResp, error)
	UpdateUserInDepartment(context.Context, *UpdateUserInDepartmentReq) (*UpdateUserInDepartmentResp, error)
	GetSearchUserList(context.Context, *GetSearchUserListReq) (*GetSearchUserListResp, error)
	SetOrganization(context.Context, *SetOrganizationReq) (*SetOrganizationResp, error)
	GetOrganization(context.Context, *GetOrganizationReq) (*GetOrganizationResp, error)
	GetSubDepartment(context.Context, *GetSubDepartmentReq) (*GetSubDepartmentResp, error)
	GetSearchDepartmentUser(context.Context, *GetSearchDepartmentUserReq) (*GetSearchDepartmentUserResp, error)
	SortDepartmentList(context.Context, *SortDepartmentListReq) (*SortDepartmentListResp, error)
	SortOrganizationUserList(context.Context, *SortOrganizationUserListReq) (*SortOrganizationUserListResp, error)
	CreateNewOrganizationMember(context.Context, *CreateNewOrganizationMemberReq) (*CreateNewOrganizationMemberResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	BatchImport(context.Context, *BatchImportReq) (*BatchImportResp, error)
	MoveUserDepartment(context.Context, *MoveUserDepartmentReq) (*MoveUserDepartmentResp, error)
	GetUserFullList(context.Context, *GetUserFullListReq) (*GetUserFullListResp, error)
	SearchUsersFullInfo(context.Context, *SearchUsersFullInfoReq) (*SearchUsersFullInfoResp, error)
}

// UnimplementedOrganizationServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationServer struct {
}

func (UnimplementedOrganizationServer) CreateDepartment(context.Context, *CreateDepartmentReq) (*CreateDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedOrganizationServer) UpdateDepartment(context.Context, *UpdateDepartmentReq) (*UpdateDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedOrganizationServer) GetOrganizationDepartment(context.Context, *GetOrganizationDepartmentReq) (*GetOrganizationDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationDepartment not implemented")
}
func (UnimplementedOrganizationServer) DeleteDepartment(context.Context, *DeleteDepartmentReq) (*DeleteDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedOrganizationServer) GetDepartment(context.Context, *GetDepartmentReq) (*GetDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedOrganizationServer) CreateOrganizationUser(context.Context, *CreateOrganizationUserReq) (*CreateOrganizationUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationUser not implemented")
}
func (UnimplementedOrganizationServer) UpdateOrganizationUser(context.Context, *UpdateOrganizationUserReq) (*UpdateOrganizationUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationUser not implemented")
}
func (UnimplementedOrganizationServer) DeleteOrganizationUser(context.Context, *DeleteOrganizationUserReq) (*DeleteOrganizationUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationUser not implemented")
}
func (UnimplementedOrganizationServer) CreateDepartmentMember(context.Context, *CreateDepartmentMemberReq) (*CreateDepartmentMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartmentMember not implemented")
}
func (UnimplementedOrganizationServer) GetUserInDepartment(context.Context, *GetUserInDepartmentReq) (*GetUserInDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInDepartment not implemented")
}
func (UnimplementedOrganizationServer) DeleteUserInDepartment(context.Context, *DeleteUserInDepartmentReq) (*DeleteUserInDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserInDepartment not implemented")
}
func (UnimplementedOrganizationServer) UpdateUserInDepartment(context.Context, *UpdateUserInDepartmentReq) (*UpdateUserInDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInDepartment not implemented")
}
func (UnimplementedOrganizationServer) GetSearchUserList(context.Context, *GetSearchUserListReq) (*GetSearchUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchUserList not implemented")
}
func (UnimplementedOrganizationServer) SetOrganization(context.Context, *SetOrganizationReq) (*SetOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrganization not implemented")
}
func (UnimplementedOrganizationServer) GetOrganization(context.Context, *GetOrganizationReq) (*GetOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedOrganizationServer) GetSubDepartment(context.Context, *GetSubDepartmentReq) (*GetSubDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubDepartment not implemented")
}
func (UnimplementedOrganizationServer) GetSearchDepartmentUser(context.Context, *GetSearchDepartmentUserReq) (*GetSearchDepartmentUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchDepartmentUser not implemented")
}
func (UnimplementedOrganizationServer) SortDepartmentList(context.Context, *SortDepartmentListReq) (*SortDepartmentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortDepartmentList not implemented")
}
func (UnimplementedOrganizationServer) SortOrganizationUserList(context.Context, *SortOrganizationUserListReq) (*SortOrganizationUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortOrganizationUserList not implemented")
}
func (UnimplementedOrganizationServer) CreateNewOrganizationMember(context.Context, *CreateNewOrganizationMemberReq) (*CreateNewOrganizationMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewOrganizationMember not implemented")
}
func (UnimplementedOrganizationServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedOrganizationServer) BatchImport(context.Context, *BatchImportReq) (*BatchImportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchImport not implemented")
}
func (UnimplementedOrganizationServer) MoveUserDepartment(context.Context, *MoveUserDepartmentReq) (*MoveUserDepartmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveUserDepartment not implemented")
}
func (UnimplementedOrganizationServer) GetUserFullList(context.Context, *GetUserFullListReq) (*GetUserFullListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFullList not implemented")
}
func (UnimplementedOrganizationServer) SearchUsersFullInfo(context.Context, *SearchUsersFullInfoReq) (*SearchUsersFullInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsersFullInfo not implemented")
}
func (UnimplementedOrganizationServer) mustEmbedUnimplementedOrganizationServer() {}

// UnsafeOrganizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationServer will
// result in compilation errors.
type UnsafeOrganizationServer interface {
	mustEmbedUnimplementedOrganizationServer()
}

func RegisterOrganizationServer(s grpc.ServiceRegistrar, srv OrganizationServer) {
	s.RegisterService(&Organization_ServiceDesc, srv)
}

func _Organization_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/CreateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).CreateDepartment(ctx, req.(*CreateDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/UpdateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).UpdateDepartment(ctx, req.(*UpdateDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetOrganizationDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetOrganizationDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/GetOrganizationDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetOrganizationDepartment(ctx, req.(*GetOrganizationDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/DeleteDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).DeleteDepartment(ctx, req.(*DeleteDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/GetDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetDepartment(ctx, req.(*GetDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_CreateOrganizationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).CreateOrganizationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/CreateOrganizationUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).CreateOrganizationUser(ctx, req.(*CreateOrganizationUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_UpdateOrganizationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).UpdateOrganizationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/UpdateOrganizationUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).UpdateOrganizationUser(ctx, req.(*UpdateOrganizationUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_DeleteOrganizationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).DeleteOrganizationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/DeleteOrganizationUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).DeleteOrganizationUser(ctx, req.(*DeleteOrganizationUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_CreateDepartmentMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).CreateDepartmentMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/CreateDepartmentMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).CreateDepartmentMember(ctx, req.(*CreateDepartmentMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetUserInDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetUserInDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/GetUserInDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetUserInDepartment(ctx, req.(*GetUserInDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_DeleteUserInDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserInDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).DeleteUserInDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/DeleteUserInDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).DeleteUserInDepartment(ctx, req.(*DeleteUserInDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_UpdateUserInDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).UpdateUserInDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/UpdateUserInDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).UpdateUserInDepartment(ctx, req.(*UpdateUserInDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetSearchUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetSearchUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/GetSearchUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetSearchUserList(ctx, req.(*GetSearchUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_SetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).SetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/SetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).SetOrganization(ctx, req.(*SetOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetOrganization(ctx, req.(*GetOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetSubDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetSubDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/GetSubDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetSubDepartment(ctx, req.(*GetSubDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetSearchDepartmentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchDepartmentUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetSearchDepartmentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/GetSearchDepartmentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetSearchDepartmentUser(ctx, req.(*GetSearchDepartmentUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_SortDepartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortDepartmentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).SortDepartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/SortDepartmentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).SortDepartmentList(ctx, req.(*SortDepartmentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_SortOrganizationUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortOrganizationUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).SortOrganizationUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/SortOrganizationUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).SortOrganizationUserList(ctx, req.(*SortOrganizationUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_CreateNewOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewOrganizationMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).CreateNewOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/CreateNewOrganizationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).CreateNewOrganizationMember(ctx, req.(*CreateNewOrganizationMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_BatchImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).BatchImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/BatchImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).BatchImport(ctx, req.(*BatchImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_MoveUserDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveUserDepartmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).MoveUserDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/MoveUserDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).MoveUserDepartment(ctx, req.(*MoveUserDepartmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetUserFullList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFullListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetUserFullList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/GetUserFullList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetUserFullList(ctx, req.(*GetUserFullListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_SearchUsersFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersFullInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).SearchUsersFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenIMChat.organization.organization/SearchUsersFullInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).SearchUsersFullInfo(ctx, req.(*SearchUsersFullInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Organization_ServiceDesc is the grpc.ServiceDesc for Organization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Organization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OpenIMChat.organization.organization",
	HandlerType: (*OrganizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDepartment",
			Handler:    _Organization_CreateDepartment_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _Organization_UpdateDepartment_Handler,
		},
		{
			MethodName: "GetOrganizationDepartment",
			Handler:    _Organization_GetOrganizationDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _Organization_DeleteDepartment_Handler,
		},
		{
			MethodName: "GetDepartment",
			Handler:    _Organization_GetDepartment_Handler,
		},
		{
			MethodName: "CreateOrganizationUser",
			Handler:    _Organization_CreateOrganizationUser_Handler,
		},
		{
			MethodName: "UpdateOrganizationUser",
			Handler:    _Organization_UpdateOrganizationUser_Handler,
		},
		{
			MethodName: "DeleteOrganizationUser",
			Handler:    _Organization_DeleteOrganizationUser_Handler,
		},
		{
			MethodName: "CreateDepartmentMember",
			Handler:    _Organization_CreateDepartmentMember_Handler,
		},
		{
			MethodName: "GetUserInDepartment",
			Handler:    _Organization_GetUserInDepartment_Handler,
		},
		{
			MethodName: "DeleteUserInDepartment",
			Handler:    _Organization_DeleteUserInDepartment_Handler,
		},
		{
			MethodName: "UpdateUserInDepartment",
			Handler:    _Organization_UpdateUserInDepartment_Handler,
		},
		{
			MethodName: "GetSearchUserList",
			Handler:    _Organization_GetSearchUserList_Handler,
		},
		{
			MethodName: "SetOrganization",
			Handler:    _Organization_SetOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _Organization_GetOrganization_Handler,
		},
		{
			MethodName: "GetSubDepartment",
			Handler:    _Organization_GetSubDepartment_Handler,
		},
		{
			MethodName: "GetSearchDepartmentUser",
			Handler:    _Organization_GetSearchDepartmentUser_Handler,
		},
		{
			MethodName: "SortDepartmentList",
			Handler:    _Organization_SortDepartmentList_Handler,
		},
		{
			MethodName: "SortOrganizationUserList",
			Handler:    _Organization_SortOrganizationUserList_Handler,
		},
		{
			MethodName: "CreateNewOrganizationMember",
			Handler:    _Organization_CreateNewOrganizationMember_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Organization_GetUserInfo_Handler,
		},
		{
			MethodName: "BatchImport",
			Handler:    _Organization_BatchImport_Handler,
		},
		{
			MethodName: "MoveUserDepartment",
			Handler:    _Organization_MoveUserDepartment_Handler,
		},
		{
			MethodName: "GetUserFullList",
			Handler:    _Organization_GetUserFullList_Handler,
		},
		{
			MethodName: "SearchUsersFullInfo",
			Handler:    _Organization_SearchUsersFullInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization/organization.proto",
}
